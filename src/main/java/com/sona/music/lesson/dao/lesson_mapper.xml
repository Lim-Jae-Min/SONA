<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>
<mapper namespace="com.sona.music.lesson.dao.LessonDAO">
	
	<select id="recommendListCall" resultType="com.sona.music.lesson.dto.LessonDTO">
		SELECT (SELECT pb.new_filename FROM PHOTO_BOARD pb WHERE pb.POST_IDX = co.CLASS_IDX AND pb.photo_category = 'lesson') AS new_filename
			, co.class_idx
			, co.class_name
			, co.user_id
			, u.user_name
			<![CDATA[
				, CASE WHEN (SELECT COUNT(mh.manner_idx) FROM MANNER_HISTORY mh WHERE mh.user_id = u.user_id) < 5
				      THEN '신규 회원'
				      ELSE CONCAT(FORMAT((SELECT (SUM(mh.manner_variance) + 36.5) FROM MANNER_HISTORY mh WHERE mh.user_id = u.user_id), 2), '')
				      END AS manner
			]]>
			, CASE WHEN (SELECT COUNT(apply_state) FROM APPLY_HISTORY ah WHERE ah.apply_state = '결제 완료' AND ah.class_idx = co.class_idx) IS NULL
				THEN 0
				ELSE (SELECT COUNT(apply_state) FROM APPLY_HISTORY ah WHERE ah.apply_state = '결제 완료' AND ah.class_idx = co.class_idx)
				END AS accumulate_student
			, co.class_location
		FROM CLASS_OPEN co JOIN USERS u on co.user_id = u.user_id
		WHERE class_inst = #{param5} AND class_delete = 0 AND class_disable = 0
		<if test="param4 != ''">
			AND ${param3} LIKE CONCAT('%', #{param4}, '%')
		</if>
		ORDER BY manner DESC LIMIT #{param1} OFFSET #{param2}
	</select>
	
	<select id="allListCall" resultType="com.sona.music.lesson.dto.LessonDTO">
		SELECT (SELECT pb.new_filename FROM PHOTO_BOARD pb WHERE pb.POST_IDX = CONVERT(co.CLASS_IDX, char) AND pb.photo_category = 'lesson') AS new_filename
			, co.class_idx
			, co.class_name
			, co.user_id
			, u.user_name
			<![CDATA[
				, CASE WHEN (SELECT COUNT(mh.manner_idx) FROM MANNER_HISTORY mh WHERE mh.user_id = u.user_id) < 5
					      THEN '신규 회원'
					      ELSE CONCAT(FORMAT((SELECT (SUM(mh.manner_variance) + 36.5) FROM MANNER_HISTORY mh WHERE mh.user_id = u.user_id), 2), '')
					      END AS manner
			]]>
			, CASE WHEN (SELECT COUNT(apply_state) FROM APPLY_HISTORY ah WHERE ah.apply_state = '결제 완료' AND ah.class_idx = co.class_idx) IS NULL
				THEN 0
				ELSE (SELECT COUNT(apply_state) FROM APPLY_HISTORY ah WHERE ah.apply_state = '결제 완료' AND ah.class_idx = co.class_idx)
				END AS accumulate_student
			, co.class_location
		FROM CLASS_OPEN co JOIN USERS u on co.user_id = u.user_id
		WHERE class_delete = 0 AND class_disable = 0
		<if test="param4 != '' || param5 != '지역 전체' || param6 != '' || param7 != ''">
			AND
			<if test="param4 != ''">
				${param3} LIKE CONCAT('%', #{param4}, '%')
				<if test="param5 != '지역 전체' || param6 != '' || param7 != ''">
					AND
				</if>
			</if>
			<if test="param5 != '지역 전체'">
				class_location = #{param5}
				<if test="param6 != '' || param7 != ''">
					AND
				</if>
			</if>
			<if test="param6 != ''">
				inst_category_idx = #{param6}
				<if test="param7 != ''">
					AND
				</if>
			</if>
			<if test="param7 != ''">
				class_inst = #{param7}
			</if>
		</if>
		ORDER BY manner DESC LIMIT #{param1} OFFSET #{param2}
	</select>

	<select id="recommendListCount" resultType="Integer">
		SELECT CEIL(COUNT(class_idx)/#{param1}) FROM CLASS_OPEN WHERE class_inst = #{param4} AND class_delete = 0 AND class_disable = 0
		<if test="param3 != null">
			AND ${param2} LIKE CONCAT('%', #{param3}, '%')
		</if>
	</select>
	
	<select id="allListCount" resultType="Integer">
		SELECT CEIL(COUNT(class_idx)/#{param1}) FROM CLASS_OPEN WHERE class_delete = 0 AND class_disable = 0
		<if test="param3 != '' || param4 != '지역 전체' || param5 != '' || param6 != ''">
			AND
			<if test="param3 != ''">
				${param2} LIKE CONCAT('%', #{param3}, '%')
				<if test="param4 != '지역 전체' || param5 != '' || param6 != ''">
					AND
				</if>
			</if>
			<if test="param4 != '지역 전체'">
				class_location = #{param4}
				<if test="param5 != '' || param6 != ''">
					AND
				</if>
			</if>
			<if test="param5 != ''">
				inst_category_idx = #{param5}
				<if test="param6 != ''">
					AND
				</if>
			</if>
			<if test="param6 != ''">
				class_inst = #{param6}
			</if>
			
		</if>
	</select>
	
	<insert id="lessonWrite"
		useGeneratedKeys="true"
		keyColumn="class_idx"
		keyProperty="class_idx"
		parameterType="com.sona.music.lesson.dto.LessonDTO">
		INSERT INTO CLASS_OPEN(user_id, inst_category_idx, class_inst, class_location, class_days, class_hours, need_inst, class_style,
			class_name, class_content, class_times, class_price, career_years, career_contents)
		values(#{user_id}, #{inst_category_idx}, #{class_inst}, #{class_location}, #{class_days}, #{class_hours}, #{need_inst}, #{class_style},
			#{class_name}, #{class_content}, #{class_times}, #{class_price}, #{career_years}, #{career_contents})
	</insert>
	
	<insert id="videoWrite">
		INSERT INTO CAREER_VIDEO(class_idx, video_url) values(#{param1}, #{param2})
	</insert>
	
	<insert id="photoWrite">
		INSERT INTO PHOTO_BOARD(user_id, ori_filename, new_filename, post_idx, photo_category) 
			VALUES(#{param1}, #{param2}, #{param3}, #{param4}, #{param5})
	</insert>
	
	<select id="lessonDetail" resultType="com.sona.music.lesson.dto.LessonDTO">
		SELECT
			co.class_name
			, co.inst_category_idx
			, co.class_inst
			, (SELECT u.user_name FROM USERS u WHERE u.user_id = co.user_id) AS user_name
			, CASE WHEN FORMAT((SELECT avg(r.score) FROM REVIEW r WHERE r.class_idx = co.class_idx), 2) IS NULL THEN 0
				ELSE FORMAT((SELECT avg(r.score) FROM REVIEW r WHERE r.class_idx = co.class_idx), 2)
				END AS class_score
			, co.user_id
			, co.class_location
			, CONCAT(FORMAT((SELECT (SUM(mh.manner_variance) + 36.5) FROM MANNER_HISTORY mh WHERE mh.user_id = co.user_id), 2), '') AS manner
			, co.class_reg_date
			, co.career_years
			, co.career_contents
			, co.class_content
			, co.class_style
			, co.class_days
			, co.class_hours
			, co.need_inst
			, CASE WHEN (SELECT COUNT(apply_state) FROM APPLY_HISTORY ah WHERE ah.apply_state = '결제 완료' AND ah.class_idx = co.class_idx) IS NULL
				THEN 0
				ELSE (SELECT COUNT(apply_state) FROM APPLY_HISTORY ah WHERE ah.apply_state = '결제 완료' AND ah.class_idx = co.class_idx)
				END AS accumulate_student
			, co.class_times
			, co.class_price
			, (SELECT video_url FROM CAREER_VIDEO cv WHERE cv.class_idx = #{param1}) AS video_url
			, co.class_disable
			, co.class_delete
			, co.class_idx
		FROM CLASS_OPEN co
		WHERE co.class_idx = #{param1}
	</select>
	
	<select id="lessonLogoLoad" resultType="String">
		SELECT pb.new_filename FROM PHOTO_BOARD pb WHERE pb.post_idx = #{param1} AND pb.photo_category = 'Lesson'
	</select>
		
	<select id="lessonPhotosLoad" resultType="com.sona.music.lesson.dto.PhotoDTO">
		SELECT pb.new_filename FROM PHOTO_BOARD pb WHERE pb.post_idx = #{param1} AND pb.photo_category = 'Career'
	</select>
	
	<select id="lessonReviewList" resultType="com.sona.music.board.dto.ReviewDTO">
		SELECT
			(SELECT pb.new_filename FROM PHOTO_BOARD pb 
			WHERE pb.user_id = r.rater_id AND pb.photo_category = 'Profile' ORDER BY pb.photo_idx LIMIT 1) AS profile_photoname
			, (SELECT u.user_name FROM USERS u WHERE u.user_id = r.rater_id) AS rater_name
			, r.score
			, r.review_title
			, r.review_idx
		FROM REVIEW r
		WHERE r.class_idx = #{param1} AND r.REVIEW_DELETE = 0
		ORDER BY r.review_idx DESC LIMIT 4;
	</select>
	
	<select id="lessonQnAList" resultType="com.sona.music.board.dto.QnADTO">
		SELECT
			cq.q_title
			, cq.anonymous_status
			, cq.question_idx
		FROM CLASS_QUESTION cq
		WHERE cq.class_idx = #{param1} AND cq.q_delete = 0
		ORDER BY cq.question_idx DESC LIMIT 4
	</select>
	
	<select id="applyCheck" resultType="com.sona.music.lesson.dto.LessonDTO">
		SELECT ah.apply_idx, ah.apply_state FROM APPLY_HISTORY ah WHERE ah.class_idx = #{param1} AND ah.user_id = #{param2} ORDER BY ah.apply_idx DESC LIMIT 1
	</select>
	
	<insert id="leesonApply">
		INSERT INTO APPLY_HISTORY(class_idx, user_id, apply_state, apply_detail)
			VALUES(#{param1}, #{param2}, '신청 완료', (concat(substr(cast(curdate() as char), 1, 8), right(concat("00000" , 
				(SELECT COUNT(ah.apply_idx) FROM APPLY_HISTORY ah WHERE YEAR(ah.REG_DATE) = YEAR(CURDATE()) 
				AND MONTH(ah.REG_DATE) = MONTH(CURDATE()) AND ah.apply_state = '신청 완료')), 6))))
	</insert>
	
	<update id="lessonBlind">
		UPDATE CLASS_OPEN SET class_delete = 1 WHERE class_idx = #{param1}
	</update>
	
	<update id="lessonUnBlind">
		UPDATE CLASS_OPEN SET class_delete = 0 WHERE class_idx = #{param1}
	</update>
	
	<update id="lessonDisable">
		UPDATE CLASS_OPEN SET class_disable = 1 WHERE class_idx = #{param1}
	</update>
	
	<update id="lessonUnDisable">
		UPDATE CLASS_OPEN SET class_disable = 0 WHERE class_idx = #{param1}
	</update>
	
	<update id="lessonUpdate" parameterType="com.sona.music.lesson.dto.LessonDTO">
		UPDATE CLASS_OPEN SET inst_category_idx = #{inst_category_idx}, class_inst = #{class_inst}, class_location = #{class_location}
			, class_days = #{class_days}, class_hours = #{class_hours}, need_inst = #{need_inst}, class_style = #{class_style}
			, class_name = #{class_name}, class_content = #{class_content}, class_times = #{class_times}, class_price = #{class_price}
			, career_years = #{career_years}, career_contents = #{career_contents}
		WHERE class_idx = #{class_idx}
	</update>
	
	<insert id="videoUpsert">
		INSERT INTO CAREER_VIDEO(class_idx, video_url) values(#{param1}, #{param2})
		ON DUPLICATE KEY UPDATE video_url = #{param2}
	</insert>
	
	<delete id="lessonLogoDel">
		DELETE FROM PHOTO_BOARD WHERE post_idx = #{param1} AND photo_category = 'Lesson'
	</delete>
	
	<delete id="lessonPhotosDel">
		DELETE FROM PHOTO_BOARD WHERE post_idx = #{param1} AND photo_category = 'Career'
	</delete>
	
</mapper>