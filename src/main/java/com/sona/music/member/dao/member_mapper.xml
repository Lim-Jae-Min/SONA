<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>
<mapper namespace="com.sona.music.member.dao.MemberDAO">

	<select id="findIdEmail" resultType="String">
		SELECT USER_EMAIL FROM USERS WHERE USER_EMAIL = #{param1} LIMIT 1
	</select>
	


	<select id="findId" resultType="String">
		SELECT user_id FROM USERS WHERE user_email = #{param1}
	</select>
	
	<select id="findPw" resultType="String">
		SELECT user_pass FROM USERS WHERE user_id = #{param1} AND user_email = #{param2}
	</select>
	
	<select id="findPwcheckId" resultType="String">
		SELECT user_id FROM USERS WHERE user_id = #{param1}
	</select>
	
	<select id="findPwEmail" resultType="String">
		SELECT user_email FROM USERS WHERE user_email = #{param1} AND user_id = #{param2}
	</select>
	
	<update id="changePw">
		UPDATE USERS SET user_pass = #{param2} WHERE user_id = #{param1}
	</update>
	
 
	<select id="userLogin" resultType="com.sona.music.member.dto.MemberDTO">
		<![CDATA[
			select 
				u.USER_ID,
				u.USER_NAME,
				u.USER_TYPE,
				CASE WHEN (SELECT COUNT(mh.manner_idx) FROM MANNER_HISTORY mh WHERE mh.user_id = u.user_id) < 5
			      THEN '신규 강사'
			      ELSE CONCAT(FORMAT((SELECT (SUM(mh.manner_variance) + 36.5) FROM MANNER_HISTORY mh WHERE mh.user_id = u.user_id), 2), '')
			      END AS manner,
				CASE WHEN (SELECT sum(up.POINT) FROM USER_POINT up WHERE up.user_id = u.user_id) IS NULL THEN 0
					ELSE (SELECT sum(up.POINT) FROM USER_POINT up WHERE up.user_id = u.user_id) END AS point,
				(SELECT COUNT(ah.alarm_idx) FROM ALARM_HISTORY ah WHERE ah.user_id = #{param1} AND ALARM_VIEWS = 0) AS alarm_count
			FROM USERS u WHERE u.USER_ID = #{param1} AND u.USER_PASS = #{param2}	
		
		]]>
		</select>
	
	<select id="overlay" resultType="int">
		SELECT COUNT(USER_ID) FROM USERS WHERE USER_ID = #{param1}
   </select>
	
	<insert id ="join" parameterType="com.sona.music.member.dto.MemberDTO">
		INSERT INTO USERS(USER_ID,USER_NAME,USER_EMAIL,USER_PASS,USER_PHONE,USER_ACCOUNTNUMBER,USER_TYPE,USER_BANK)
		VALUES(#{user_id},#{user_name},#{user_email},#{user_pass},#{user_phone},#{user_accountnumber},#{user_type},#{user_bank})
	</insert>
	
	
	
	<select id="detail" resultType="com.sona.music.member.dto.MemberDTO">
		select 
			u.USER_ID,
			u.USER_EMAIL,
			u.USER_NAME,
			u.USER_TYPE,
			CONCAT(FORMAT((SELECT (SUM(mh.manner_variance) + 36.5) 
				FROM MANNER_HISTORY mh), 2), '') AS manner,
			(SELECT pb.NEW_FILENAME from PHOTO_BOARD pb WHERE u.USER_ID = pb.USER_ID
				AND pb.PHOTO_CATEGORY='Profile' and pb.USER_ID='user2') as profile
		FROM USERS u WHERE u.USER_ID = #{param1}
	</select>
	
	<select id="userLessonList" resultType="com.sona.music.member.dto.MemberDTO">
		SELECT
			co.class_idx 
			, co.class_name
		   , CASE WHEN (SELECT COUNT(apply_state) FROM APPLY_HISTORY ah WHERE ah.apply_state = '결제 완료' AND ah.class_idx = co.class_idx) IS NULL
		         THEN 0
		         ELSE (SELECT COUNT(apply_state) FROM APPLY_HISTORY ah WHERE ah.apply_state = '결제 완료' AND ah.class_idx = co.class_idx)
		         END AS count
		   , CASE WHEN FORMAT((SELECT avg(r.score) FROM REVIEW r WHERE r.class_idx = co.class_idx), 1) IS NULL THEN 0
				ELSE FORMAT((SELECT avg(r.score) FROM REVIEW r WHERE r.class_idx = co.class_idx), 1)
				END AS score
		   , co.class_reg_date
		FROM CLASS_OPEN co WHERE co.USER_ID = #{param1}
		ORDER BY co.CLASS_IDX desc
		LIMIT #{param2} OFFSET #{param3}
	</select>
	
	<select id="userReviewList" resultType="com.sona.music.board.dto.ReviewDTO">
	SELECT 
		review_idx,
	    review_title,
	    rater_id,
	    score,
	    review_reg_date,
	    total_reviews - ROW_NUMBER() OVER (ORDER BY REVIEW_IDX DESC) + 1 AS index_order
	FROM 
	    (
	        SELECT 
	            review_title,
	            rater_id,
	            score,
	            review_reg_date,
	            REVIEW_IDX,
	            (SELECT COUNT(*) FROM REVIEW WHERE ratee_id = #{param1}) AS total_reviews
	        FROM 
	            REVIEW 
	        WHERE 
	            ratee_id = #{param1}
	    ) AS review_with_total_reviews
	ORDER BY REVIEW_IDX DESC
	    LIMIT #{param2} OFFSET #{param3}
   
	</select>	
	
	<select id="userLessonPageCount" resultType="Integer">
		SELECT CEIL(COUNT(*)/#{param1}) AS pages FROM CLASS_OPEN WHERE user_id = #{param2}
	</select>
	
	<select id="userLessonAllCount" resultType="Integer">
		SELECT COUNT(*) AS allCount FROM CLASS_OPEN WHERE user_id = #{param1}
	</select>
	
	<select id="userReviewPageCount" resultType="Integer">
		SELECT CEIL(COUNT(*)/#{param1}) AS pages FROM REVIEW WHERE ratee_id = #{param2}
	</select>
	
	<select id="userReviewAllCount" resultType="Integer">
		SELECT COUNT(*) AS allCount FROM REVIEW WHERE ratee_id = #{param1}
	</select>
	
	<select id="adminLogin" resultType="com.sona.music.admin.dto.AdminDTO">
		SELECT a.admin_id FROM ADMIN a WHERE a.admin_id = #{param1} AND a.admin_pass = #{param2} 
	</select>
	
	<select id="myTeacher" resultType="com.sona.music.member.dto.MemberDTO">
		SELECT 
			(SELECT mt.category FROM MY_TEACHER mt WHERE mt.user_id = #{param2} 
				AND mt.teacher_id = #{param1} AND mt.category = 'favorite') AS favorite
			, (SELECT mt2.category FROM MY_TEACHER mt2 WHERE mt2.user_id = #{param2} 
				AND mt2.teacher_id = #{param1} AND mt2.category = 'block') AS block
	</select>
	
	<insert id="favorite">
		INSERT INTO MY_TEACHER(user_id, teacher_id, category) VALUES(#{param1}, #{param2}, 'favorite')
	</insert>
	
	<delete id="unFavorite">
		DELETE FROM MY_TEACHER WHERE user_id = #{param1} AND teacher_id = #{param2} AND category = 'favorite'
	</delete>
	
	<insert id="block">
		INSERT INTO MY_TEACHER(user_id, teacher_id, category) VALUES(#{param1}, #{param2}, 'block')
	</insert>
	
	<delete id="unblock">
		DELETE FROM MY_TEACHER WHERE user_id = #{param1} AND teacher_id = #{param2} AND category = 'block'
	</delete>
	
	
	
</mapper>	