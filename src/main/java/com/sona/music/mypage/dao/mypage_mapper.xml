<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>
<mapper namespace="com.sona.music.mypage.dao.MyPageDAO">

	<select id="getUserInfo" parameterType="String" resultType="com.sona.music.mypage.dto.MyPageDTO">
	    SELECT 
	    	u.user_pass,
	        u.user_name,
	        u.user_type,
	        u.user_id,
	        u.user_email,
	        u.user_phone,
	        u.user_bank,
	        u.user_accountnumber,
	        af.applyform_inst,
	        af.applyform_location,
	        af.applyform_days,
	        af.applyform_style,
	        af.have_inst,
			(SELECT pb.new_filename FROM PHOTO_BOARD pb WHERE pb.user_id = u.user_id AND pb.photo_category = 'userInfo'
				ORDER BY pb.photo_idx DESC LIMIT 1) AS new_filename
	    FROM USERS u
	    LEFT JOIN APPLICATION_FORM af ON u.user_id = af.user_id AND af.user_id = #{loginId}
	    WHERE u.user_id = #{loginId}
	</select>	    	    
	    
	    	    
	<update id="updateUserInfo" parameterType="java.util.Map">
	    UPDATE USERS
	    SET 
	        user_name = #{user_name},
	        user_pass = #{user_pass},
	        user_email = #{user_email},
	        user_phone = #{user_phone},
	        user_accountnumber = #{user_accountnumber},
	        user_bank = #{user_bank}
	    WHERE user_id = #{loginId} 
	</update>
	
	<insert id="fileWrite">
		INSERT INTO PHOTO_BOARD(user_id, ori_filename, new_filename, post_idx, photo_category) 
			VALUES(#{param1}, #{param2}, #{param3}, #{param4}, #{param5})
	</insert>
	
	<select id="UserPhotosLoad" resultType="com.sona.music.mypage.dto.PhotoDTO">
		SELECT pb.new_filename FROM PHOTO_BOARD pb WHERE pb.user_id = #{param1} AND pb.photo_category = 'userInfo'
			ORDER BY pb.photo_idx desc limit 1
	</select>
	
	<update id="updateApplyForm" parameterType="java.util.Map">
	    UPDATE APPLICATION_FORM
	    SET 
	        inst_category_idx = #{inst_category_idx},
	        applyform_inst = #{applyform_inst},
	        applyform_location = #{applyform_location},
	        applyform_days = #{applyform_days},
	        applyform_style = #{applyform_style}
	    WHERE user_id = #{loginId}
	</update>
	
    
	<select id="getClassNames" parameterType="String" resultType="String">
	    SELECT DISTINCT co.class_name
	    FROM CLASS_QUESTION cq
	    JOIN CLASS_OPEN co ON cq.class_idx = co.class_idx
	    WHERE cq.user_id = #{param1}
	</select>
		
		<select id="getClassNames2" parameterType="String" resultType="String">
	    SELECT DISTINCT co.class_name
     	FROM CLASS_OPEN co 
     	JOIN APPLY_HISTORY ah ON co.CLASS_IDX = ah.CLASS_IDX 
     	WHERE co.USER_ID = #{param1}
		</select>
	    
		
	<select id="qnaList" resultType="com.sona.music.mypage.dto.MyPageDTO">
		SELECT 
		    cq.question_idx,
		    cq.q_title,
		    cq.user_id,
		    (SELECT u.user_name FROM USERS u WHERE u.user_id = cq.user_id) AS user_name,
		    (
		        SELECT 
		            CASE WHEN EXISTS (
		                SELECT 1 
		                FROM CLASS_ANSWER ca 
		                WHERE ca.question_idx = cq.question_idx
		            ) 
		            THEN 'Y' 
		            ELSE 'N' 
		        END
		    ) AS answer_status,
		    cq.q_reg_date
		FROM 
		    CLASS_QUESTION cq
		WHERE
		    cq.user_id = #{param1}
		ORDER BY
		    cq.question_idx DESC
				LIMIT #{param2} OFFSET #{param3}
	</select>
	
		<select id="qnaListFilter" resultType="com.sona.music.mypage.dto.MyPageDTO">
			SELECT 
			    cq.question_idx,
			    cq.q_title,
			    cq.user_id,
			    (SELECT u.user_name FROM USERS u WHERE u.user_id = cq.user_id) AS user_name,
			    (
			        SELECT 
			            CASE WHEN EXISTS (
			                SELECT 1 
			                FROM CLASS_ANSWER ca 
			                WHERE ca.question_idx = cq.question_idx
			            ) 
			            THEN 'Y' 
			            ELSE 'N' 
			        END
			    ) AS answer_status,
			    cq.q_reg_date
			FROM 
			    CLASS_QUESTION cq
			JOIN  CLASS_OPEN co on co.class_idx = cq.class_idx
			WHERE
			    cq.user_id = #{param1} AND co.class_name = #{param4}
			ORDER BY
			    cq.question_idx DESC
				LIMIT #{param2} OFFSET #{param3}
	</select>
		
		
	<select id="qnaNotAllCount" resultType="Integer" parameterType="map">
    	SELECT 	CEIL(COUNT(*) /#{param1}) AS pages
	    FROM 
	        CLASS_QUESTION cq
	    JOIN 
	        CLASS_OPEN co ON cq.class_idx = co.class_idx
	    WHERE
	       	 cq.user_id = #{param2}
	</select>
	
	<select id="qnaAllCount" resultType="Integer" parameterType="map">
    	SELECT 	CEIL(COUNT(*) /#{param1}) AS pages
	    FROM 
	        CLASS_QUESTION cq
	    JOIN 
	        CLASS_OPEN co ON cq.class_idx = co.class_idx
	    WHERE
	        cq.user_id = #{param2} AND  co.class_name = #{param3}
	</select>
	
	<select id="pointAllCount" resultType="Integer" parameterType="Integer">
	   	SELECT CEIL(COUNT(*) / #{pagePerCnt}) AS pages FROM USER_POINT
	</select>	
	
	<select id="receiveAllCount" resultType="Integer" parameterType="Integer">
	   	SELECT CEIL(COUNT(*) / #{pagePerCnt}) AS pages FROM REVIEW
	</select>

	<select id="sendAllCount" resultType="Integer" parameterType="Integer">
	   	SELECT CEIL(COUNT(*) / #{pagePerCnt}) AS pages FROM REVIEW
	</select>
	
	<select id="courseAllCount" resultType="Integer" parameterType="java.util.Map">
	    SELECT CEIL(COUNT(*) / #{param1}) AS pages 
	    FROM APPLY_HISTORY ah
	    JOIN CLASS_OPEN co ON ah.class_idx = co.class_idx
	    WHERE ah.user_id = #{param2} 
	      AND ah.apply_state IN ('신청 완료', '결제 대기', '결제 완료','강의 종료')
	</select>
	

	<select id="lessonAllCount" resultType="Integer" parameterType="map">
    	SELECT CEIL(COUNT(*) / #{cnt}) AS pages FROM CLASS_OPEN WHERE USER_ID ='user2'
	</select>
	
	<select id="teacherStudentAllCount" resultType="Integer" parameterType="map">
    	SELECT CEIL(COUNT(*)/#{cnt}) AS pages
			FROM APPLY_HISTORY ah JOIN CLASS_OPEN co ON ah.class_idx = co.class_idx 
			WHERE ah.APPLY_IDX IN (
			    SELECT MAX(apply_idx)
			    FROM APPLY_HISTORY
			    WHERE class_idx IN (SELECT co.class_idx from CLASS_OPEN co WHERE co.user_id = 'user2')
			    GROUP BY APPLY_DETAIL
			)
	</select>
	
	<select id="teacherReceiveAllCount" resultType="Integer" parameterType="map">
    	SELECT
		   CEIL(COUNT(*)/#{cnt}) AS pages
	  FROM REVIEW r JOIN CLASS_OPEN co ON r.class_idx = co.class_idx 
	 	WHERE r.RATEE_ID = #{user_id}
	</select>
	
	<select id="teacherReceiveAllCountFilter" resultType="Integer" parameterType="map">
    	SELECT
		   CEIL(COUNT(*)/#{cnt}) AS pages
	  FROM REVIEW r JOIN CLASS_OPEN co ON r.class_idx = co.class_idx 
	 	WHERE r.RATEE_ID = #{user_id} and co.CLASS_NAME = #{selectedClass}
	</select>
	
	<select id="QnaAllCount" resultType="Integer" parameterType="map">
    	SELECT 	CEIL(COUNT(*) /#{cnt}) AS pages
	    FROM 
	        CLASS_QUESTION cq
	    LEFT JOIN 	
	        CLASS_ANSWER ca ON cq.question_idx = ca.answer_idx
	    JOIN 
	        CLASS_OPEN co ON cq.class_idx = co.class_idx
	    WHERE
	        co.user_id = #{user_id}
	</select>
	
	
	<select id="tLessonAllCountFilter" resultType="Integer" parameterType="map">
    	SELECT COUNT(*) AS allCount 
    	FROM CLASS_OPEN WHERE user_id = #{user_id} AND CLASS_DISABLE = #{state}
	</select>
	
	<select id="tLessonAllCount" resultType="Integer" parameterType="map">
    	SELECT COUNT(*) AS allCount 
    	FROM CLASS_OPEN WHERE user_id = #{user_id}
	</select>
	
	
	
	<select id="teacherPointAllCount" resultType="Integer" parameterType="map">
	   	SELECT 
			CEIL(COUNT(*)/#{cnt}) AS pages
			FROM 
			    USER_POINT up 
			WHERE 
			    up.user_id = #{user_id}
			ORDER BY 
			    up.point_idx desc
	</select>	
	
	<select id="teacherWrittenAllCount" resultType="Integer" parameterType="map">
	   	SELECT 
	   	CEIL(COUNT(*)/#{cnt}) AS pages
		FROM REVIEW WHERE RATER_ID = #{user_id}
	</select>	
	
	<select id="teacherPointList" resultType="com.sona.music.mypage.dto.MyPageDTO" parameterType="java.util.Map">
	SELECT 
	    up.point_date,
	    up.point_type,
	    up.point,
	    (SUM(point) OVER (ORDER BY up.point_idx)) AS balance
	FROM 
	    USER_POINT up 
	WHERE 
	    up.user_id = #{param3}
	ORDER BY 
	    up.point_idx desc
	LIMIT #{param2},#{param1}
	</select>
	
	<select id="QnaAllCountFilter" resultType="Integer" parameterType="map">
    	SELECT 	CEIL(COUNT(*) /#{cnt}) AS pages
	    FROM 
	        CLASS_QUESTION cq
	    LEFT JOIN 	
	        CLASS_ANSWER ca ON cq.question_idx = ca.answer_idx
	    JOIN 
	        CLASS_OPEN co ON cq.class_idx = co.class_idx
	    WHERE
	        co.user_id = #{user_id} AND  co.class_name = #{selectedClass}
	</select>

	<select id="pointList" resultType="com.sona.music.mypage.dto.MyPageDTO" parameterType="java.util.Map">
	SELECT 
	    up.point_date,
	    up.point_type,
	    up.point,
	    (SUM(point) OVER (ORDER BY up.point_idx)) AS balance
	FROM 
	    USER_POINT up 
	WHERE 
	    up.user_id = #{param3}
	ORDER BY 
	    up.point_idx desc
	LIMIT #{param2},#{param1}
	</select>
	   
	<select id="getPointAmount" parameterType="String" resultType="com.sona.music.mypage.dto.MyPageDTO">
	    SELECT SUM(point)
	    FROM USER_POINT
	    WHERE user_id = #{loginId}
	</select>
		
		
	<select id="lessonlist" resultType="com.sona.music.member.dto.MemberDTO">
		SELECT 
			 co.class_name
			,co.class_idx
		  	,CASE WHEN (SELECT COUNT(apply_state) FROM APPLY_HISTORY ah WHERE ah.apply_state = '결제 완료' AND ah.class_idx = co.class_idx) IS NULL
		         THEN 0
		         ELSE (SELECT COUNT(apply_state) FROM APPLY_HISTORY ah WHERE ah.apply_state = '결제 완료' AND ah.class_idx = co.class_idx)
		         END AS count
		    ,FORMAT((SELECT avg(r.score) FROM REVIEW r WHERE co.class_idx = '2'), 1) AS score
		    ,co.class_reg_date
		    ,co.class_disable
		FROM CLASS_OPEN co WHERE co.USER_ID = 'user2' AND co.CLASS_DISABLE = #{param4}
		ORDER BY co.CLASS_IDX desc
		LIMIT #{param2} OFFSET #{param3}
	</select>
	
	
	<select id="lessonlistall" resultType="com.sona.music.member.dto.MemberDTO">
		SELECT
			 co.class_name
			,co.class_idx
		   	,CASE WHEN (SELECT COUNT(apply_state) FROM APPLY_HISTORY ah WHERE ah.apply_state = '결제 완료' AND ah.class_idx = co.class_idx) IS NULL
		         THEN 0
		         ELSE (SELECT COUNT(apply_state) FROM APPLY_HISTORY ah WHERE ah.apply_state = '결제 완료' AND ah.class_idx = co.class_idx)
		         END AS count
		   	,FORMAT((SELECT avg(r.score) FROM REVIEW r WHERE co.class_idx = '2'), 1) AS score
		  	,co.class_reg_date
		   	,co.class_disable
		FROM CLASS_OPEN co WHERE co.USER_ID = 'user2'
		ORDER BY co.CLASS_IDX desc
		LIMIT #{param2} OFFSET #{param3}
	</select>

	
	<select id="teacherStudentList" resultType="com.sona.music.mypage.dto.MyPageDTO">
		SELECT 
			ah.apply_idx
		   , (SELECT u.user_name FROM USERS u WHERE u.user_id = ah.user_id) as student_name
		   , co.class_name
		   , ah.apply_state
		   , (SELECT ch.ch_result FROM CLASS_HISTORY ch 
		      WHERE ch.ch_idx = (SELECT MAX(ch_idx) FROM CLASS_HISTORY WHERE student_id = ah.user_id
		      AND apply_detail = ah.apply_detail AND ch_result NOT IN ('강의 종료'))) AS lesson_progress
		   , (SELECT ch2.ch_result FROM CLASS_HISTORY ch2 WHERE ch2.student_id = ah.user_id 
		      AND ch2.apply_detail = ah.apply_detail AND ch2.ch_result = '강의 종료') AS end_check
		   , (SELECT ah2.reg_date FROM APPLY_HISTORY ah2 WHERE ah2.user_id = ah.user_id 
		      AND ah2.apply_state = '결제 완료' AND ah2.apply_detail = ah.apply_detail) AS start_date
		   , (SELECT ch3.ch_date FROM CLASS_HISTORY ch3 WHERE ch3.ch_result = '강의 종료' 
		      AND ch3.apply_detail = ah.apply_detail AND ch3.class_idx = ah.class_idx) AS end_date
	FROM APPLY_HISTORY ah JOIN CLASS_OPEN co ON ah.class_idx = co.class_idx 
	WHERE ah.APPLY_IDX IN (
	    SELECT MAX(apply_idx)
	    FROM APPLY_HISTORY
	    WHERE class_idx IN (SELECT co.class_idx from CLASS_OPEN co WHERE co.user_id = #{param1})
	    GROUP BY APPLY_DETAIL
)
ORDER BY ah.APPLY_IDX DESC
LIMIT #{param2} OFFSET #{param3}
	</select>
	
	
	
	<select id="teacherStudentListFilter" resultType="com.sona.music.mypage.dto.MyPageDTO">
		SELECT 
			ah.apply_idx
		   , (SELECT u.user_name FROM USERS u WHERE u.user_id = ah.user_id) as student_name
		   , co.class_name
		   , ah.apply_state
		   , (SELECT ch.ch_result FROM CLASS_HISTORY ch 
		      WHERE ch.ch_idx = (SELECT MAX(ch_idx) FROM CLASS_HISTORY WHERE student_id = ah.user_id
		      AND apply_detail = ah.apply_detail AND ch_result NOT IN ('강의 종료'))) AS lesson_progress
		   , (SELECT ch2.ch_result FROM CLASS_HISTORY ch2 WHERE ch2.student_id = ah.user_id 
		      AND ch2.apply_detail = ah.apply_detail AND ch2.ch_result = '강의 종료') AS end_check
		   , (SELECT ah2.reg_date FROM APPLY_HISTORY ah2 WHERE ah2.user_id = ah.user_id 
		      AND ah2.apply_state = '결제 완료' AND ah2.apply_detail = ah.apply_detail) AS start_date
		   , (SELECT ch3.ch_date FROM CLASS_HISTORY ch3 WHERE ch3.ch_result = '강의 종료' 
		      AND ch3.apply_detail = ah.apply_detail AND ch3.class_idx = ah.class_idx) AS end_date
	FROM APPLY_HISTORY ah JOIN CLASS_OPEN co ON ah.class_idx = co.class_idx 
	WHERE ah.APPLY_IDX IN (
	    SELECT MAX(apply_idx)
	    FROM APPLY_HISTORY
	    WHERE class_idx IN (SELECT co.class_idx from CLASS_OPEN co WHERE co.user_id = #{param1})
	    GROUP BY APPLY_DETAIL
)
AND co.class_name = #{param4}
ORDER BY ah.APPLY_IDX DESC
LIMIT #{param2} OFFSET #{param3}
	</select>
	
	<select id="teacherQnaList" resultType="com.sona.music.mypage.dto.MyPageDTO">
			    	SELECT 
					    	cq.question_idx,
					        cq.q_title,
					        cq.user_id,
					        (select u.user_name from USERS u WHERE u.user_id = cq.user_id) as user_name,
					        CASE WHEN cq.question_idx = ca.QUESTION_IDX  THEN 'Y' ELSE 'N' END AS answer_status,
					        cq.q_reg_date,
					        co.class_name
					    FROM 
					        CLASS_QUESTION cq
					    LEFT JOIN 
					        CLASS_ANSWER ca ON cq.question_idx = ca.QUESTION_IDX 
					    JOIN 
					        CLASS_OPEN co ON cq.class_idx = co.class_idx
					    WHERE
					        co.user_id = #{param1}
					    ORDER BY
					        cq.question_idx DESC
				LIMIT #{param2} OFFSET #{param3}
	</select>

	<select id="teacherQnaListFilter" resultType="com.sona.music.mypage.dto.MyPageDTO">
		SELECT 
	    	cq.question_idx,
	        cq.q_title,
	        cq.user_id,
	        (select u.user_name from USERS u WHERE u.user_id = cq.user_id) as user_name,
	        CASE WHEN cq.question_idx = ca.QUESTION_IDX  THEN 'Y' ELSE 'N' END AS answer_status,
	        cq.q_reg_date,
	        co.class_name
	    FROM 
	        CLASS_QUESTION cq
	    LEFT JOIN 
	        CLASS_ANSWER ca ON cq.question_idx = ca.QUESTION_IDX 
	    JOIN 
	        CLASS_OPEN co ON cq.class_idx = co.class_idx
	    WHERE
	        co.user_id = #{param1} AND co.class_name = #{param4}
	    ORDER BY
	        cq.question_idx DESC
				LIMIT #{param2} OFFSET #{param3}
	</select>
	
<select id="receiveList" resultType="com.sona.music.mypage.dto.MyPageDTO" parameterType="java.util.Map">
    SELECT 
    	r.ratee_id,
        r.review_idx, 
        r.review_reg_date, 
        r.review_title, 
        u2.user_name AS user_name, 
        r.score,
        FORMAT(((r.score - 3) * 0.25), 2) AS manner_variance
    FROM 
        REVIEW r 
    JOIN 
        USERS u1 ON u1.user_id = r.ratee_id 
    JOIN 
        USERS u2 ON u2.user_id = r.rater_id 
    WHERE 
        r.ratee_id = #{param3}
    ORDER BY 
        r.review_idx DESC
    LIMIT 
        #{param2}, #{param1}
</select>
	   
	<select id="sendList" resultType="com.sona.music.mypage.dto.MyPageDTO" parameterType="java.util.Map">
	    SELECT 
	    	r.rater_id,
	        r.review_idx, 
	        r.review_reg_date, 
	        r.review_title, 
	        u.user_name AS user_name, 
	        r.score 
	    FROM 
	        REVIEW r 
	    JOIN 
	        USERS u ON u.user_id = r.ratee_id 
	    WHERE 
	        r.rater_id = #{param3} 
	    ORDER BY 
	        r.review_idx DESC
	    LIMIT 
	        #{param2}, #{param1}
	</select>
	   
	   
	<select id="courseList" resultType="com.sona.music.mypage.dto.MyPageDTO" parameterType="java.util.Map">
	SELECT distinct
	    co.class_idx,
	    ah.apply_idx,
	    co.class_name,
	    u.user_name AS teacher_name,
	    co.class_price,
	    ah.apply_state,
	    ch.ch_result AS lesson_progress,
	    ch2.ch_result AS end_check,
	    ah2.reg_date AS apply_date
	FROM 
	    APPLY_HISTORY ah
	JOIN 
	    CLASS_OPEN co ON ah.class_idx = co.class_idx
	JOIN 
	    USERS u ON u.user_id = co.user_id
	LEFT JOIN 
	    CLASS_HISTORY ch ON ch.ch_idx = (
	        SELECT MAX(ch_idx) 
	        FROM CLASS_HISTORY 
	        WHERE student_id = #{param3} 
	        AND apply_detail = ah.apply_detail 
	        AND ch_result NOT IN ('강의 종료')
	    )
	LEFT JOIN 
	    CLASS_HISTORY ch2 ON ch2.student_id = #{param3} 
	    AND ch2.apply_detail = ah.apply_detail 
	    AND ch2.ch_result = '강의 종료'
	LEFT JOIN 
	    APPLY_HISTORY ah2 ON ah2.user_id = #{param3} 
	    AND ah2.apply_state = '신청 완료' 
	    AND ah2.apply_detail = ah.apply_detail
	WHERE 
	    ah.APPLY_IDX IN (
	        SELECT MAX(apply_idx)
	        FROM APPLY_HISTORY
	        WHERE user_id = #{param3}
	        GROUP BY apply_detail
	    )
	ORDER BY 
	    ah.APPLY_IDX DESC
			LIMIT #{param2},#{param1}	
		
	</select>
	   
	
	    
	<select id="favoriteListCall" resultType="com.sona.music.mypage.dto.MyPageDTO">
		<![CDATA[
			SELECT
				mt.teacher_id AS user_id
				, u.user_name
				, (SELECT pb.new_filename FROM PHOTO_BOARD pb WHERE pb.user_id = mt.teacher_id AND pb.photo_category = 'Profile') AS new_filename
				, CASE WHEN (SELECT COUNT(co.class_idx) FROM CLASS_OPEN co WHERE co.user_id = mt.teacher_id) IS NULL
					THEN 0
					ELSE (SELECT COUNT(co.class_idx) FROM CLASS_OPEN co WHERE co.user_id = mt.teacher_id)
					END AS accumulate_lesson
				, CASE WHEN (SELECT COUNT(mh.manner_idx) FROM MANNER_HISTORY mh WHERE mh.user_id = mt.teacher_id) < 5
					THEN '신규 강사'
					ELSE CONCAT(FORMAT((SELECT (SUM(mh.manner_variance) + 36.5) FROM MANNER_HISTORY mh WHERE mh.user_id = mt.teacher_id), 2), '')
					END AS manner
			FROM MY_TEACHER mt JOIN USERS u ON mt.teacher_id = u.user_id
			WHERE mt.user_id = #{param3} AND mt.category = 'favorite'
			LIMIT #{param1} OFFSET #{param2}
		]]>
	</select>
	
	<select id="favoriteListCount" resultType="Integer">
		SELECT CEIL(COUNT(user_id)/#{param1}) FROM MY_TEACHER WHERE user_id = #{param2} AND category = 'favorite'
	</select>
	
	<delete id="teacherListDel">
		DELETE FROM MY_TEACHER WHERE teacher_id = #{param1} AND user_id = #{param2}
	</delete>
	
	<select id="blockListCall" resultType="com.sona.music.mypage.dto.MyPageDTO">
		<![CDATA[
			SELECT
				mt.teacher_id AS user_id
				, u.user_name
				, (SELECT pb.new_filename FROM PHOTO_BOARD pb WHERE pb.user_id = mt.teacher_id AND pb.photo_category = 'Profile') AS new_filename
				, CASE WHEN (SELECT COUNT(co.class_idx) FROM CLASS_OPEN co WHERE co.user_id = mt.teacher_id) IS NULL
					THEN 0
					ELSE (SELECT COUNT(co.class_idx) FROM CLASS_OPEN co WHERE co.user_id = mt.teacher_id)
					END AS accumulate_lesson
				, CASE WHEN (SELECT COUNT(mh.manner_idx) FROM MANNER_HISTORY mh WHERE mh.user_id = mt.teacher_id) < 5
					THEN '신규 강사'
					ELSE CONCAT(FORMAT((SELECT (SUM(mh.manner_variance) + 36.5) FROM MANNER_HISTORY mh WHERE mh.user_id = mt.teacher_id), 2), '')
					END AS manner
			FROM MY_TEACHER mt JOIN USERS u ON mt.teacher_id = u.user_id
			WHERE mt.user_id = #{param3} AND mt.category = 'block'
			LIMIT #{param1} OFFSET #{param2}
		]]>
	</select>
	
	<select id="blockListCount" resultType="Integer">
		SELECT CEIL(COUNT(user_id)/#{param1}) FROM MY_TEACHER WHERE user_id = #{param2} AND category = 'block'
	</select>
	
	<select id="teacherReceiveList" resultType="com.sona.music.mypage.dto.MyPageDTO" parameterType="java.util.Map">
		SELECT
		   r.review_idx
		   , r.review_reg_date 
		   , r.review_title 
		   , r.rater_id 
		   , r.score 
		   , FORMAT(((r.score - 3) * 0.25), 2) AS manner_variance
	  FROM REVIEW r JOIN CLASS_OPEN co ON r.class_idx = co.class_idx 
	 	WHERE r.RATEE_ID = #{param1}
	 	ORDER BY REVIEW_REG_DATE DESC
	 	LIMIT #{param2} OFFSET #{param3}
	</select>
	    
	<select id="teacherReceiveListFilter" resultType="com.sona.music.mypage.dto.MyPageDTO" parameterType="java.util.Map">
		SELECT
		   r.review_idx
		   , r.review_reg_date 
		   , r.review_title 
		   , r.rater_id 
		   , r.score 
		   , FORMAT(((r.score - 3) * 0.25), 2) AS manner_variance
	  FROM REVIEW r JOIN CLASS_OPEN co ON r.class_idx = co.class_idx 
	 	WHERE r.RATEE_ID = #{param1} and co.CLASS_NAME = #{param4}
	 	ORDER BY REVIEW_REG_DATE DESC
			LIMIT #{param2} OFFSET #{param3}
	</select>
	
	<select id="teacherWrittenList" resultType="com.sona.music.mypage.dto.MyPageDTO" parameterType="java.util.Map">
		SELECT 
			REVIEW_IDX,
			REVIEW_REG_DATE,
			REVIEW_TITLE,
			RATEE_ID,
			SCORE
		FROM REVIEW WHERE RATER_ID = #{param1}
		ORDER BY REVIEW_REG_DATE DESC
			LIMIT #{param2} OFFSET #{param3}
	</select>
	
</mapper>