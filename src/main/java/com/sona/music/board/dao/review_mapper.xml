<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>
<mapper namespace="com.sona.music.board.dao.ReviewDAO">

	<select id="list" resultType="com.sona.music.board.dto.ReviewDTO">
		SELECT
		r.REVIEW_IDX,
    	r.SCORE, 
    	r.REVIEW_TITLE, 
    	r.RATER_ID, 
   		 CONCAT(MIN(CH_DATE), ' ~ ', MAX(CH_DATE)) AS STUDY_DATE,
   		(SELECT COUNT(NEW_FILENAME) FROM PHOTO_BOARD p WHERE p.POST_IDX = r.REVIEW_IDX AND p.PHOTO_CATEGORY = 'Review') AS img_cnt,
    	r.REVIEW_REG_DATE 
		FROM REVIEW r 
		JOIN CLASS_HISTORY ch ON r.CLASS_IDX = ch.CLASS_IDX
		WHERE
		r.CLASS_IDX = #{param3} AND
    	r.REVIEW_DELETE = 0
		GROUP BY r.REVIEW_IDX
		ORDER BY REVIEW_IDX DESC 
		LIMIT #{param1} OFFSET #{param2}
	</select>
	
	<select id="allCount" resultType="Integer">
		SELECT CEIL(COUNT(REVIEW_IDX)/#{param1}) AS pages 
		FROM REVIEW
		WHERE REVIEW_DELETE = 0
		AND CLASS_IDX = #{param2}
	</select>
	
	<insert id="write"
	useGeneratedKeys="true"
	keyColumn = "review_idx"
	keyProperty="review_idx"
	parameterType="com.sona.music.board.dto.ReviewDTO"
	>
	INSERT INTO REVIEW(CLASS_IDX,RATER_ID,RATEE_ID,SCORE,REVIEW_TITLE,REVIEW_CONTENT,APPLY_DETAIL)
			VALUES(#{class_idx},#{rater_id},#{ratee_id},#{score},#{review_title},#{review_content},#{apply_detail})
	
	</insert>
	
	<insert id="fileWrite">
		INSERT INTO PHOTO_BOARD(ORI_FILENAME,NEW_FILENAME,POST_IDX,USER_ID,PHOTO_CATEGORY)
			VALUES(#{param1},#{param2},#{param3},#{param4},#{param5})
	</insert>
	
	<select id="detail" resultType="com.sona.music.board.dto.ReviewDTO">
		select * from REVIEW where REVIEW_IDX = #{param1}
	</select>
	
	<select id="photos" resultType="com.sona.music.board.dto.PhotoDTO">
		SELECT ORI_FILENAME, NEW_FILENAME, POST_IDX,PHOTO_CATEGORY
		FROM PHOTO_BOARD WHERE POST_IDX = #{param1} AND PHOTO_CATEGORY = #{param2}
	</select>
	
	<update id="deleteReview">
		UPDATE REVIEW
		SET REVIEW_DELETE = 1
		WHERE REVIEW_IDX = #{param1}
	</update>
	
	<update id="update" parameterType="map">
		UPDATE REVIEW SET  
		REVIEW_TITLE =#{review_title} , 
		REVIEW_CONTENT =#{review_content} 
		WHERE REVIEW_IDX = #{review_idx}
	</update>
	
	<delete id="photoEdit" parameterType="com.sona.music.board.dto.PhotoDTO">
    DELETE FROM PHOTO_BOARD WHERE POST_IDX = #{param1} AND PHOTO_CATEGORY = #{param2}
	</delete>
	
	
	<insert id="manner"
	useGeneratedKeys="true"
	keyColumn = "manner_idx"
	keyProperty="manner_idx"
	parameterType="com.sona.music.board.dto.ReviewDTO"
	>
	INSERT INTO MANNER_HISTORY(USER_ID,MANNER_TYPE,MANNER_VARIANCE)
			VALUES(#{user_id},#{manner_type},#{manner_variance})
	
	</insert>
	
	<select id="lessonLogoLoad" resultType="String">
	SELECT
	pb.NEW_FILENAME
	FROM
	REVIEW r
	JOIN
	CLASS_OPEN co ON r.CLASS_IDX = co.CLASS_IDX
	JOIN
	PHOTO_BOARD pb ON co.CLASS_IDX = pb.POST_IDX
	WHERE
	r.REVIEW_IDX = #{param1}
	AND pb.PHOTO_CATEGORY = 'Lesson'
	</select>
	
	<select id="lessonHeader" resultType="com.sona.music.board.dto.ReviewDTO">
	SELECT 
    r.CLASS_IDX,
    co.CLASS_NAME,
    co.CLASS_INST,
    co.CLASS_LOCATION,
    u.USER_NAME,
    FORMAT((SELECT (SUM(mh.MANNER_VARIANCE) + 36.5)
    FROM MANNER_HISTORY mh
    WHERE mh.USER_ID = co.USER_ID), 2) AS MANNER,
    FORMAT((SELECT AVG(r2.SCORE) 
    FROM REVIEW r2 
    WHERE r2.CLASS_IDX = r.CLASS_IDX), 2) AS CLASS_SCORE
	FROM 
    REVIEW r
	JOIN 
    CLASS_OPEN co ON r.CLASS_IDX = co.CLASS_IDX
	JOIN 
    USERS u ON co.USER_ID = u.USER_ID
	WHERE 
    r.REVIEW_IDX = #{param1}
	
	</select>
	
	
	
	
	<select id="lessonLogoLoadClass" resultType="String">
	SELECT
	pb.NEW_FILENAME
	FROM
	CLASS_OPEN co
	JOIN
	PHOTO_BOARD pb ON co.CLASS_IDX = pb.POST_IDX
	WHERE
	co.CLASS_IDX = #{param1}
	AND pb.PHOTO_CATEGORY = 'Lesson'
	
	</select>
	
	
	
	
	<select id="lessonHeaderClass" resultType="com.sona.music.board.dto.ReviewDTO">
	SELECT
	co.CLASS_IDX,
	co.CLASS_NAME,
	co.CLASS_INST,
	co.CLASS_LOCATION,
	u.USER_NAME,
	FORMAT((SELECT (SUM(mh.MANNER_VARIANCE) + 36.5)
	FROM
	MANNER_HISTORY mh
	WHERE mh.USER_ID = co.USER_ID), 2) AS MANNER,
	FORMAT((SELECT AVG(r2.SCORE)
	FROM REVIEW r2
	WHERE r2.CLASS_IDX =
	co.CLASS_IDX), 2) AS CLASS_SCORE
	FROM
	CLASS_OPEN co
	JOIN
	USERS u ON
	co.USER_ID = u.USER_ID
	WHERE
	co.CLASS_IDX = #{param1}
	
	</select>
	
	

</mapper>