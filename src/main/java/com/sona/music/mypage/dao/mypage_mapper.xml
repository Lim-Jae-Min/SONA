<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>
<mapper namespace="com.sona.music.mypage.dao.MyPageDAO">

		<select id="getUserInfo" parameterType="String" resultType="com.sona.music.mypage.dto.MyPageDTO">
		    SELECT 
		        u.user_name,
		        u.user_type,
		        u.user_id,
		        u.user_email,
		        u.user_phone,
		        u.user_bank,
		        u.user_accountnumber,
		        af.applyform_inst,
		        af.applyform_location,
		        af.applyform_days,
		        af.applyform_style,
		        af.have_inst,
		        (SELECT pb.NEW_FILENAME FROM PHOTO_BOARD pb WHERE u.USER_ID = pb.USER_ID
		        		 AND pb.PHOTO_CATEGORY='Profile' and pb.USER_ID=#{loginId}) as profile
		    FROM USERS u
		    LEFT JOIN APPLICATION_FORM af ON u.user_id = af.user_id AND af.user_id = #{loginId}
		    WHERE u.user_id = #{loginId}
		</select>	    	    
	    
	    	    
	    <update id="updateUserInfo" parameterType="java.util.Map">
	        UPDATE USERS u
	        JOIN APPLICATION_FORM us ON u.user_id = us.user_id
	        SET 
	            u.user_name = #{user_name},
	            u.user_pass = #{user_pass},
	            u.user_email = #{user_email},
	            u.user_phone = #{user_phone},
	            u.user_accountnumber = #{user_accountnumber},
	            u.user_bank = #{user_bank},
	            us.inst_category_idx = #{inst_category_idx},
	            us.applyform_inst = #{applyform_inst},
	            us.applyform_location = #{applyform_location},
	            us.applyform_days = #{applyform_days},
	            us.applyform_style = #{applyform_style}
	        WHERE u.user_id = #{loginId}
	    </update>
    
		<select id="getClassNames" parameterType="String" resultType="String">
		    SELECT DISTINCT co.class_name
		    FROM CLASS_QUESTION cq
		    JOIN CLASS_OPEN co ON cq.class_idx = co.class_idx
		    WHERE cq.user_id = #{param1}
		</select>
		
	    
		
		<select id="qnaList" resultType="com.sona.music.mypage.dto.MyPageDTO" parameterType="java.util.Map">
		    SELECT 
		        cq.anonymous_status,
		        cq.q_title,
		        CASE WHEN cq.question_idx = ca.answer_idx THEN 'Y' ELSE 'N' END AS answer_status,
		        cq.q_reg_date,
		        co.class_name
		    FROM 
		        CLASS_QUESTION cq
		    LEFT JOIN 
		        CLASS_ANSWER ca ON cq.question_idx = ca.answer_idx
		    JOIN 
		        CLASS_OPEN co ON cq.class_idx = co.class_idx
		    WHERE
		        cq.user_id = #{param3}
		    ORDER BY
		        cq.question_idx DESC
		    LIMIT #{param2},#{param1}
		</select>
		
		
		<select id="allCount" resultType="Integer" parameterType="Integer">
    		SELECT CEIL(COUNT(*) / #{pagePerCnt}) AS pages FROM CLASS_QUESTION
		</select>
		
		<select id="pointList" resultType="com.sona.music.mypage.dto.MyPageDTO" parameterType="java.util.Map">
		SELECT 
		    up.point_date,
		    up.point_type,
		    up.point,
		    (SUM(point) OVER (ORDER BY up.point_idx)) AS balance
		FROM 
		    USER_POINT up 
		WHERE 
		    up.user_id = #{param3}
		ORDER BY 
		    up.point_idx desc
		LIMIT #{param2},#{param1}
		    
	   </select>
	   
	   <select id="getPointAmount" parameterType="String" resultType="com.sona.music.mypage.dto.MyPageDTO">
		    SELECT SUM(point)
		    FROM USER_POINT
		    WHERE user_id = #{loginId}
		</select>
		
	   <select id="receiveList" resultType="com.sona.music.mypage.dto.MyPageDTO" parameterType="java.util.Map">
	   select r.review_reg_date, r.review_title, r.rater_id, r.score from REVIEW r 
			join USERS u on u.user_id = r.ratee_id 
				where u.user_id = #{param3}
					ORDER BY 
					    r.review_idx desc
							LIMIT #{param2},#{param1}
								   
	   </select>
	   
	   <select id="sendList" resultType="com.sona.music.mypage.dto.MyPageDTO" parameterType="java.util.Map">
	   select r.review_reg_date, r.review_title, r.ratee_id, r.score from REVIEW r 
			join USERS u on u.user_id = r.rater_id 
				where u.user_id = #{param3}
					ORDER BY 
					    r.review_idx desc
							LIMIT #{param2},#{param1}	   	   
	   </select>
	   
	   
	   <select id="courseList" resultType="com.sona.music.mypage.dto.MyPageDTO" parameterType="java.util.Map">
			SELECT 
			   co.class_name
			   , (SELECT u.user_name FROM USERS u WHERE u.user_id = co.user_id) AS teacher_name
			   , co.class_price
			   , ah.apply_state
			   , (SELECT ch.ch_result FROM CLASS_HISTORY ch 
			      WHERE ch.ch_idx = (SELECT MAX(ch_idx) FROM CLASS_HISTORY WHERE student_id = #{param3} 
			      AND class_idx = ah.class_idx AND ch_result NOT IN ('강의 종료'))) AS lesson_progress
			   , (SELECT ch2.ch_result FROM CLASS_HISTORY ch2 WHERE ch2.student_id = #{param3} 
			      AND ch2.class_idx = ah.class_idx AND ch2.ch_result = '강의 종료') AS end_check
			   , (SELECT ah2.reg_date FROM APPLY_HISTORY ah2 WHERE ah2.user_id = #{param3} 
			      AND ah2.apply_state = '신청 완료' AND ah2.class_idx = co.class_idx) AS apply_date
					FROM APPLY_HISTORY ah JOIN CLASS_OPEN co ON ah.class_idx = co.class_idx 
					WHERE ah.APPLY_IDX IN (
					    SELECT MAX(apply_idx)
					    FROM APPLY_HISTORY
					    WHERE user_id = #{param3}
					    GROUP BY class_idx
					)
					ORDER BY ah.APPLY_IDX DESC
						LIMIT #{param2},#{param1}	
	   
	   </select>
	   
	   
		
		
		
	    
	    
	<select id="favoriteListCall" resultType="com.sona.music.mypage.dto.MyPageDTO">
		<![CDATA[
			SELECT
				mt.teacher_id AS user_id
				, u.user_name
				, (SELECT pb.new_filename FROM PHOTO_BOARD pb WHERE pb.user_id = mt.teacher_id AND pb.photo_category = 'Profile') AS new_filename
				, CASE WHEN (SELECT COUNT(co.class_idx) FROM CLASS_OPEN co WHERE co.user_id = mt.teacher_id) IS NULL
					THEN 0
					ELSE (SELECT COUNT(co.class_idx) FROM CLASS_OPEN co WHERE co.user_id = mt.teacher_id)
					END AS accumulate_lesson
				, CASE WHEN (SELECT COUNT(mh.manner_idx) FROM MANNER_HISTORY mh WHERE mh.user_id = mt.teacher_id) < 5
					THEN '신규 강사'
					ELSE CONCAT(FORMAT((SELECT (SUM(mh.manner_variance) + 36.5) FROM MANNER_HISTORY mh WHERE mh.user_id = mt.teacher_id), 2), '')
					END AS manner
			FROM MY_TEACHER mt JOIN USERS u ON mt.teacher_id = u.user_id
			WHERE mt.user_id = #{param3} AND mt.category = 'favorite'
			LIMIT #{param1} OFFSET #{param2}
		]]>
	</select>
	
	<select id="favoriteListCount" resultType="Integer">
		SELECT CEIL(COUNT(user_id)/#{param1}) FROM MY_TEACHER WHERE user_id = #{param2} AND category = 'favorite'
	</select>
	
	<delete id="teacherListDel">
		DELETE FROM MY_TEACHER WHERE teacher_id = #{param1} AND user_id = #{param2}
	</delete>
	    
</mapper>